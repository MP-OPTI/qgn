// File: src\App.jsx
// src/App.jsx
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, Navigate, useLocation } from 'react-router-dom';
import { onAuthStateChanged, signOut } from 'firebase/auth';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useNavigate } from 'react-router-dom';
import { ToastProvider, useToast } from './contexts/ToastProvider';
import { auth } from './services/firebase';
import './fontawesome';
import URLPage from './pages/URL';
import Register from './pages/Register';
import Login from './pages/Login';
import Settings from './pages/Settings';
import LoggedInHome from './pages/LoggedInHome';
import LoggedInWiFi from './pages/LoggedInWiFi';
import LoggedInPassword from './pages/LoggedInPassword';
import WiFiPage from './pages/WiFi';
import PasswordPage from './pages/Password';
import Footer from './components/Footer';
import Hero from './components/Hero';

const MainApp = () => {
  const [user, setUser] = useState(null);
  const addToast = useToast();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
    });

    return () => unsubscribe();
  }, []);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      setUser(null);
      addToast('You are now logged out!', 'success');
      navigate('/');
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  const renderHero = (path) => {
    if (!user) {
      const heroContent = {
        '/': ['QR Codes, nothing else', '#1 Copy url   #2 Get QR Code'],
        '/url': ['QR Codes, nothing else', '#1 Copy url   #2 Get QR Code'],
        '/wifi': ['QR Codes, nothing else', '#1 Write WiFi SSID/Name and Pass   #2 Get QR Code'],
        '/password': ['QR Codes, nothing else', '#1 Generate Password   #2 Get QR Code']
      };

      if (heroContent[path]) {
        return <Hero title={heroContent[path][0]} subtitle={heroContent[path][1]} />;
      } else {
        return null;
      }
    }
    return null;
  };

  return (
    <>
      <div className="top">
        <nav>
          <i><Link to="/">qgn</Link></i>
          <div className="nav-links">
            {!user && <Link to="/register"><i>Register</i> <FontAwesomeIcon icon="user-plus" /></Link>}
            {!user && <Link to="/login"><i>Login</i> <FontAwesomeIcon icon="right-to-bracket" /></Link>}
            {user && <Link to="/settings"><FontAwesomeIcon icon="user" /></Link>}
            {user && <button onClick={handleLogout}><FontAwesomeIcon icon="right-from-bracket" /></button>}
          </div>
        </nav>
      </div>

      <div className="App">
        <header>
          <nav>
            <div className="nav-links">
              <Link to="/url" className={location.pathname === '/url' ? 'active' : ''}>URL </Link>
              <Link to="/wifi" className={location.pathname === '/wifi' ? 'active' : ''}>WiFi </Link>
              <Link to="/password" className={location.pathname === '/password' ? 'active' : ''}>Password </Link>
            </div>
          </nav>
        </header>

        {renderHero(location.pathname)}

        <div className="qr">
          <Routes>
            <Route path="/" element={user ? <Navigate to="/url" /> : <URLPage />} />
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/settings" element={<Settings />} />
            <Route path="/home" element={user ? <LoggedInHome /> : <Navigate to="/login" />} />
            <Route path="/url" element={user ? <LoggedInHome /> : <URLPage />} />
            <Route path="/wifi" element={user ? <LoggedInWiFi /> : <WiFiPage />} />
            <Route path="/password" element={user ? <LoggedInPassword /> : <PasswordPage />} />
          </Routes>
        </div>

        <Footer />
      </div>
    </>
  );
};

const App = () => (
  <ToastProvider>
    <Router>
      <MainApp />
    </Router>
  </ToastProvider>
);

export default App;


// File: src\components\CustomCheckbox.jsx
// File: src/components/Checkbox/CustomCheckbox.jsx
import React from 'react';

const CustomCheckbox = ({ checked, onChange }) => {
  return (
    <label className="custom-checkbox">
      <input type="checkbox" checked={checked} onChange={onChange} />
      <span className="checkmark"></span>
    </label>
  );
};

export default CustomCheckbox;


// File: src\components\Filter\FilterIcons.jsx
// File: src/components/FilterIcons.jsx
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSortAlphaDown, faSortAlphaUp, faClock, faTags, faTag } from '@fortawesome/free-solid-svg-icons';

const FilterIcons = ({ filter, setFilter }) => {
  return (
    <div className="filter">
      <FontAwesomeIcon
        icon={faClock}
        size="2x"
        title="Newest Added"
        onClick={() => setFilter('newest')}
        style={{ cursor: 'pointer', marginRight: '10px', color: filter === 'newest' ? 'yellow' : 'white' }}
      />
      <FontAwesomeIcon
        icon={faSortAlphaDown}
        size="2x"
        title="A-Z"
        onClick={() => setFilter('az')}
        style={{ cursor: 'pointer', marginRight: '10px', color: filter === 'az' ? 'yellow' : 'white' }}
      />
      <FontAwesomeIcon
        icon={faSortAlphaUp}
        size="2x"
        title="Z-A"
        onClick={() => setFilter('za')}
        style={{ cursor: 'pointer', marginRight: '10px', color: filter === 'za' ? 'yellow' : 'white' }}
      />
      <FontAwesomeIcon
        icon={faTags}
        size="2x"
        title="Most Tagged"
        onClick={() => setFilter('mostTagged')}
        style={{ cursor: 'pointer', marginRight: '10px', color: filter === 'mostTagged' ? 'yellow' : 'white' }}
      />
      <FontAwesomeIcon
        icon={faTag}
        size="2x"
        title="Least Tagged"
        onClick={() => setFilter('leastTagged')}
        style={{ cursor: 'pointer', marginRight: '10px', color: filter === 'leastTagged' ? 'yellow' : 'white' }}
      />
    </div>
  );
};

export default FilterIcons;


// File: src\components\Filter\FilterOptions.jsx
// File: src/components/FilterOptions.jsx
import React from 'react';

const FilterOptions = ({ filter, setFilter }) => {
  return (
    <select value={filter} onChange={(e) => setFilter(e.target.value)} style={{ marginLeft: '20px', padding: '10px' }}>
      <option value="newest">Newest added</option>
      <option value="oldest">Oldest added</option>
      <option value="az">A-Z</option>
      <option value="za">Z-A</option>
      <option value="mostTagged">Most Tagged</option>
      <option value="leastTagged">Least Tagged</option>
      <option value="recentlyUpdated">Recently Updated</option>
    </select>
  );
};

export default FilterOptions;


// File: src\components\Footer.jsx
// src/components/Footer.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Footer = () => {
  return (
    <footer>
      <nav className="footer-nav">
        <Link to="/register">Register</Link>
        <Link to="/login">Login</Link>
        <Link to="/blog">Blog</Link>
      </nav>
      <p>&copy; {new Date().getFullYear()} Morten Pradsgaard. All rights reserved.</p>
    </footer>
  );
};

export default Footer;


// File: src\components\Hero.jsx
// src/components/Hero.jsx
import React from 'react';

const Hero = ({ title, subtitle }) => (
  <div className="hero">
    <h1>{title}</h1>
    <h2>{subtitle}</h2>
  </div>
);

export default Hero;

// File: src\components\Login\LoginForm.jsx
// File: src/components/Login/LoginForm.jsx
import React from 'react';
import CustomCheckbox from '../CustomCheckbox'; // Adjust the import path as necessary

const LoginForm = ({ email, setEmail, password, setPassword, handleSubmit, rememberMe, setRememberMe }) => {
  return (
    <form onSubmit={handleSubmit} className="form-container">
      <h2>Login</h2>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <div className="checkbox-container">
        <CustomCheckbox checked={rememberMe} onChange={(e) => setRememberMe(e.target.checked)} />
        <label htmlFor="rememberMe">Remember Me</label>
      </div>
      <button type="submit">Login</button>
    </form>
  );
};

export default LoginForm;


// File: src\components\QRCode\QRCodeDisplay.jsx
// src/components/QRCode/QRCodeDisplay.jsx

import React from 'react';
import { QRCode } from 'react-qrcode-logo';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import qLogo from '../../assets/q-logo.webp';
import useDownloadQRCode from '../../hooks/useDownloadQRCode';
import { useSpring, animated } from '@react-spring/web';

const truncateUrl = (url) => {
  return url.length > 20 ? `${url.slice(0, 20)}...` : url;
};

const QRCodeDisplay = ({
  qrCode,
  handleRemove,
  handleEdit,
  editingId,
  editingUrl,
  editingTitle,
  editingTags,
  setEditingUrl,
  setEditingTitle,
  setEditingTags,
  handleEditSubmit
}) => {
  const { qrRef, downloadQRCode } = useDownloadQRCode();

  const springProps = useSpring({
    from: { opacity: 0, transform: 'scale(0.5)' },
    to: { opacity: 1, transform: 'scale(1)' },
    config: { tension: 200, friction: 10 },
  });

  return (
    <div className="qr-code" key={qrCode.id} ref={qrRef}>
        <QRCode
          value={qrCode.value}
          size={300}
          bgColor="#ffffff"
          fgColor="#000000"
          qrStyle="dots"
          eyeRadius={[
            { outer: 10, inner: 0 },
            { outer: 10, inner: 0 },
            { outer: 10, inner: 0 }
          ]}
          logoImage={qLogo}
          logoWidth={50}
        />
        
        <h3>{qrCode.title}</h3>

        <a href={qrCode.value} target="_blank"><FontAwesomeIcon icon="link" /> {truncateUrl(qrCode.value)}</a>
        
        <div className="tags-container">
          {(qrCode.tags || []).map((tag, index) => (
            <div key={index} className="tag">{tag}</div>
          ))}
        </div>

        {editingId === qrCode.id && (
          <form onSubmit={handleEditSubmit} className="edit-qr-code">
            <label>Title</label>
            <input
              type="text"
              value={editingTitle}
              onChange={(e) => setEditingTitle(e.target.value)}
              placeholder="Title"
              style={{ marginBottom: '10px' }}
            />
            <label>QR Code</label>
            <input
              type="text"
              value={editingUrl}
              onChange={(e) => setEditingUrl(e.target.value)}
              placeholder="URL"
              style={{ marginBottom: '10px' }}
            />
            <label>Tags</label>
            <input
              type="text"
              value={editingTags}
              onChange={(e) => setEditingTags(e.target.value)}
              placeholder="Tags (comma separated)"
              style={{ marginBottom: '10px' }}
            />
            <div className="approve-edit">
              <button className="green" type="submit" style={{ marginRight: '5px' }}><FontAwesomeIcon icon="check" /></button>
              <button className="black" onClick={() => handleEdit(null, '', '', '')}><FontAwesomeIcon icon="xmark" /></button>
            </div>
          </form>
        )}

        <div>
          <button className="trash" onClick={() => handleRemove(qrCode.id)}><FontAwesomeIcon icon="trash" /></button>
          <button onClick={() => handleEdit(qrCode.id, qrCode.value, qrCode.title, qrCode.tags || [])}>
            <FontAwesomeIcon icon="pen-to-square" />
          </button>
          <button onClick={() => downloadQRCode(qrCode)}>
            <FontAwesomeIcon icon="download" />
          </button>
        </div>

        <div className="qr-type">{qrCode.type}</div>
    </div>
  );
};

export default QRCodeDisplay;


// File: src\components\QRCode\QRCodeForm.jsx
// src/components/QRCode/QRCodeForm.jsx
import React, { useState } from 'react';
import { sanitizeInput } from '../../utils/sanitizeInput';

const QRCodeForm = ({ handleSubmit, isLoggedIn }) => {
  const [url, setUrl] = useState('');
  const [title, setTitle] = useState('');
  const [tags, setTags] = useState('');

  const onSubmit = (e) => {
    e.preventDefault();
    const sanitizedUrl = sanitizeInput(url);
    handleSubmit(sanitizedUrl, title, tags, 'URL');
    setUrl('');
    setTitle('');
    setTags('');
  };

  return (
    <form onSubmit={onSubmit}>

      {!isLoggedIn && <h3>Insert your URL into the field below</h3>}
      
      <input
        type="text"
        placeholder="Enter URL for the QR Code"
        value={url}
        onChange={(e) => setUrl(e.target.value)}
      />
      {isLoggedIn && (
        <>
          <input
            type="text"
            placeholder="Enter title/name"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
          <input
            type="text"
            placeholder="Tag1, Tag2, etc."
            value={tags}
            onChange={(e) => setTags(e.target.value)}
          />
        </>
      )}
      <button type="submit">Generate QR Code</button>
    </form>
  );
};

export default QRCodeForm;


// File: src\components\QRCode\QRCodeList.jsx
// File: src/components/QRCode/QRCodeList.jsx

import React from 'react';
import QRCodeDisplay from './QRCodeDisplay';
import { useTransition, animated } from '@react-spring/web';

const QRCodeList = ({
  qrCodes,
  editingId,
  editingUrl,
  editingTitle,
  editingTags,
  setEditingUrl,
  setEditingTitle,
  setEditingTags,
  handleRemove,
  handleEdit,
  handleEditSubmit
}) => {
  const transitions = useTransition(qrCodes, {
    keys: qrCode => qrCode.id,
    from: { opacity: 0, transform: 'scale(0.5)' },
    enter: { opacity: 1, transform: 'scale(1)' },
    leave: { opacity: 0, transform: 'scale(0.5)' },
    trail: 100, // delay between each item
  });

  return (
    <div className="qr-codes-grid">
      {transitions((style, qrCode) => (
        <animated.div style={style} className="qr-code-wrapper">
          <QRCodeDisplay
            key={qrCode.id}
            qrCode={qrCode}
            handleRemove={handleRemove}
            handleEdit={handleEdit}
            editingId={editingId}
            editingUrl={editingUrl}
            editingTitle={editingTitle}
            editingTags={editingTags}
            setEditingUrl={setEditingUrl}
            setEditingTitle={setEditingTitle}
            setEditingTags={setEditingTags}
            handleEditSubmit={handleEditSubmit}
          />
        </animated.div>
      ))}
    </div>
  );
};

export default QRCodeList;


// File: src\components\QRCode\QRCodeNonUserDisplay.jsx
// File: src/components/QRCode/QRCodeNonUserDisplay.jsx
import React from 'react';
import { QRCode } from 'react-qrcode-logo';
import qLogo from '../../assets/q-logo.png';

const QRCodeNonUserDisplay = ({ submittedUrl }) => {

  return (
    <div style={{ textAlign: 'center' }}>
        <>
          <QRCode
            value={submittedUrl}
            size={256}
            bgColor="#ffffff"
            fgColor="#000000"
            qrStyle="dots"
            eyeRadius={[
              { outer: 10, inner: 0 },
              { outer: 10, inner: 0 },
              { outer: 10, inner: 0 },
            ]}
            logoImage={qLogo}
            logoWidth={50}
          />
          <a href={submittedUrl} target="_blank" rel="noopener noreferrer">
            {submittedUrl}
          </a>
        </>
    </div>
  );
};

export default QRCodeNonUserDisplay;


// File: src\components\QRCode\QRCodePasswordForm.jsx
// src/components/QRCode/QRCodePasswordForm.jsx
import React, { useState, useEffect } from 'react';
import { sanitizeInput } from '../../utils/sanitizeInput';

const generatePassword = (length) => {
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let password = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
};

const QRCodePasswordForm = ({ handleSubmit, isLoggedIn }) => {
  const [password, setPassword] = useState('');
  const [tags, setTags] = useState('');

  useEffect(() => {
    const newPassword = generatePassword(32);
    setPassword(newPassword);
  }, []);

  const regeneratePassword = () => {
    const newPassword = generatePassword(32);
    setPassword(newPassword);
  };

  const onSubmit = (e) => {
    e.preventDefault();
    const sanitizedPassword = sanitizeInput(password);
    handleSubmit(sanitizedPassword, 'Generated Password', tags, 'Password');
    setTags('');
  };

  return (
    <form onSubmit={onSubmit}>
      <h3>Generated Password</h3>
      <input
        type="text"
        value={password}
        readOnly
      />
      <button type="button" onClick={regeneratePassword}>Generate</button>
      {isLoggedIn && (
      <input
        type="text"
        placeholder="Tag1, Tag2, etc."
        value={tags}
        onChange={(e) => setTags(e.target.value)}
      />
      )}
      <button type="submit">Get Password QR Code</button>
    </form>
  );
};

export default QRCodePasswordForm;


// File: src\components\QRCode\QRCodeWiFiForm.jsx
// src/components/QRCode/QRCodeWiFiForm.jsx
import React, { useState } from 'react';
import { sanitizeInput } from '../../utils/sanitizeInput';

const QRCodeWiFiForm = ({ handleSubmit, isLoggedIn }) => {
  const [ssid, setSsid] = useState('');
  const [password, setPassword] = useState('');
  const [tags, setTags] = useState('');

  const onSubmit = (e) => {
    e.preventDefault();
    const sanitizedSsid = sanitizeInput(ssid);
    const sanitizedPassword = sanitizeInput(password);
    const wifiString = `WIFI:S:${sanitizedSsid};T:WPA;P:${sanitizedPassword};;`;
    handleSubmit(wifiString, ssid, tags, 'WiFi');
    setSsid('');
    setPassword('');
    setTags('');
  };

  return (
    <form onSubmit={onSubmit}>
      {!isLoggedIn && <h3>Insert your SSID and Pass below</h3>}
      <input
        type="text"
        placeholder="Enter SSID"
        value={ssid}
        onChange={(e) => setSsid(e.target.value)}
      />
      <input
        type="password"
        placeholder="Enter Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      {isLoggedIn && (
      <input
        type="text"
        placeholder="Tag1, Tag2, etc."
        value={tags}
        onChange={(e) => setTags(e.target.value)}
      />
      )}
      <button type="submit">Generate WiFi QR Code</button>
    </form>
  );
};

export default QRCodeWiFiForm;


// File: src\components\Register\RegisterForm.jsx
//RegisterForm.jsx
import React from 'react';

const RegisterForm = ({ email, setEmail, password, setPassword, handleSubmit }) => {
  return (
    <form onSubmit={handleSubmit} className="form-container">
      <h2>Register</h2>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button type="submit">Register</button>
    </form>
  );
};

export default RegisterForm;


// File: src\components\SearchBar.jsx
// src/components/SearchBar.jsx
import React from 'react';

const SearchBar = ({ searchQuery, setSearchQuery, qrType, setQrType }) => {
  return (
    <>
      <div className="search-bar">
        <input
          type="text"
          placeholder="Search by URL, title, or tags"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        </div>
      <select value={qrType} onChange={(e) => setQrType(e.target.value)}>
        <option value="">All Types</option>
        <option value="URL">URL</option>
        <option value="WiFi">WiFi</option>
        <option value="Password">Password</option>
      </select>
    </>
  );
};

export default SearchBar;


// File: src\components\Settings\AccountDeletion.jsx
//AccountDeletion.jsx
import React, { useState } from 'react';
import { deleteUser } from 'firebase/auth';
import { useToast } from '../../contexts/ToastProvider';

const AccountDeletion = ({ user, navigate, addToast }) => {
  const [confirmDelete, setConfirmDelete] = useState(false);

  const handleDeleteAccount = async () => {
    try {
      if (user) {
        await deleteUser(user);
        addToast('Account deleted successfully!', 'success');
        navigate('/');
      }
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  return (
    <div className="delete-account">
      <h3>Account deletion</h3>
      {!confirmDelete ? (
        <button onClick={() => setConfirmDelete(true)} className="delete-account-button">
          Delete Account
        </button>
      ) : (
        <div className="confirm-delete">
          <p>If you delete your account, you'll lose all your saved QR codes and you won't be able to get it back.</p>
          <button onClick={handleDeleteAccount} className="confirm-button">Yes</button>
          <button onClick={() => setConfirmDelete(false)} className="cancel-button">No</button>
        </div>
      )}
    </div>
  );
};

export default AccountDeletion;


// File: src\components\Settings\EmailStatus.jsx
//EmailStatus.jsx
import React, { useState, useEffect } from 'react';
import { sendEmailVerification, updateEmail, reauthenticateWithCredential, EmailAuthProvider } from 'firebase/auth';
import { auth } from '../../services/firebase';
import { useToast } from '../../contexts/ToastProvider';

const EmailStatus = ({ user, emailVerified, newEmail, setNewEmail, currentPassword, setCurrentPassword, handleCancelEdit }) => {
  const [editingEmail, setEditingEmail] = useState(false);
  const [verificationSent, setVerificationSent] = useState(false);
  const [countdown, setCountdown] = useState(5);
  const addToast = useToast();

  useEffect(() => {
    let timer;
    if (!emailVerified && verificationSent) {
      timer = setInterval(async () => {
        setCountdown((prevCountdown) => (prevCountdown <= 1 ? 5 : prevCountdown - 1));
        if (countdown <= 1) {
          try {
            if (user) {
              await user.reload();
              if (user.emailVerified) {
                addToast('Email verified!', 'success');
                window.location.reload();
              }
            }
          } catch (error) {
            addToast(error.message, 'error');
          }
        }
      }, 1000);
    }

    return () => clearInterval(timer);
  }, [user, emailVerified, verificationSent, countdown, addToast]);

  const handleSendVerificationEmail = async () => {
    try {
      const user = auth.currentUser;
      if (user) {
        await sendEmailVerification(user);
        setVerificationSent(true);
        addToast('Verification email sent to your current email. Please check your inbox.', 'success');
      }
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  const handleReauthenticate = async (e) => {
    e.preventDefault();
    try {
      const user = auth.currentUser;
      const credential = EmailAuthProvider.credential(user.email, currentPassword);
      await reauthenticateWithCredential(user, credential);
      addToast('Re-authentication successful. Please proceed to verify your new email.', 'success');
      handleSendVerificationEmail();
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  const handleChangeEmail = async () => {
    try {
      const user = auth.currentUser;
      if (user) {
        await updateEmail(user, newEmail);
        await sendEmailVerification(user);
        addToast('New email set and verification email sent to new address. Please check your inbox.', 'success');
        setEditingEmail(false);
        setVerificationSent(true);
      }
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  return (
    <div className="email-status">
      <p>Email Status: {emailVerified ? 'Verified' : 'Not Verified'}</p>
      <div>
        <input
          type="email"
          value={newEmail}
          onChange={(e) => setNewEmail(e.target.value)}
          disabled={!editingEmail || verificationSent}
          placeholder="Enter new email"
        />
        {!editingEmail ? (
          <button onClick={() => setEditingEmail(true)} className="edit-email-button">
            Edit Email
          </button>
        ) : (
          <>
            {!verificationSent ? (
              <>
                <input
                  type="password"
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                  placeholder="Enter current password"
                  required
                />
                <button onClick={handleReauthenticate} className="verify-email-button">
                  Verify Email
                </button>
              </>
            ) : (
              <>
                <p>Verification email sent. Please check your inbox.</p>
                <p>Checking again in {countdown} seconds...</p>
              </>
            )}
            <button onClick={handleCancelEdit} className="cancel-button">
              Cancel
            </button>
          </>
        )}
      </div>
      {emailVerified && verificationSent && (
        <button onClick={handleChangeEmail} className="change-email-button">
          Change Email
        </button>
      )}
    </div>
  );
};

export default EmailStatus;


// File: src\components\Settings\PasswordChange.jsx
//PasswordChange.jsx

import React, { useState } from 'react';
import { reauthenticateWithCredential, EmailAuthProvider, updatePassword } from 'firebase/auth';
import { auth } from '../../services/firebase';
import { useToast } from '../../contexts/ToastProvider';

const PasswordChange = ({ currentPassword, setCurrentPassword, newPassword, setNewPassword, confirmNewPassword, setConfirmNewPassword, handleCancelEdit }) => {
  const [editingPassword, setEditingPassword] = useState(false);
  const addToast = useToast();

  const handleChangePassword = async () => {
    if (newPassword !== confirmNewPassword) {
      addToast('Passwords do not match.', 'error');
      return;
    }

    try {
      const user = auth.currentUser;
      if (user) {
        const credential = EmailAuthProvider.credential(user.email, currentPassword);
        await reauthenticateWithCredential(user, credential);
        await updatePassword(user, newPassword);
        addToast('Password updated successfully!', 'success');
        setEditingPassword(false);
        setCurrentPassword('');
        setNewPassword('');
        setConfirmNewPassword('');
      }
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  return (
    <div className="password-change">
      <h3>Change Password</h3>
      <div>
        <input
          type="password"
          value={currentPassword}
          onChange={(e) => setCurrentPassword(e.target.value)}
          placeholder="Enter current password"
          required
        />
        <input
          type="password"
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
          placeholder="Enter new password"
          required
        />
        <input
          type="password"
          value={confirmNewPassword}
          onChange={(e) => setConfirmNewPassword(e.target.value)}
          placeholder="Confirm new password"
          required
        />
        {!editingPassword ? (
          <button onClick={() => setEditingPassword(true)} className="edit-password-button">
            Change Password
          </button>
        ) : (
          <>
            <button onClick={handleChangePassword} className="change-password-button">
              Update Password
            </button>
            <button onClick={handleCancelEdit} className="cancel-button">
              Cancel
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PasswordChange;


// File: src\contexts\ToastProvider.jsx
// Toast.jsx
import React, { useContext, useState } from 'react';

const ToastContext = React.createContext();

export const useToast = () => useContext(ToastContext);

export const ToastProvider = ({ children }) => {
  const [toasts, setToasts] = useState([]);

  const addToast = (message, type = 'success') => {
    const id = Date.now();
    setToasts([...toasts, { id, message, type }]);
    setTimeout(() => {
      setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
    }, 4000); // Toast will disappear after 3 seconds
  };

  return (
    <ToastContext.Provider value={addToast}>
      {children}
      <div className="toast-container">
        {toasts.map((toast) => (
          <div key={toast.id} className={`toast ${toast.type}`}>
            {toast.message}
          </div>
        ))}
      </div>
    </ToastContext.Provider>
  );
};


// File: src\fontawesome.js
// src/fontawesome.js
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';

library.add(fas);


// File: src\hooks\useAuth.js
// useAuth.js
import { useState, useEffect } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from '../services/firebase';

export const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
      setLoading(false);
    });
    return unsubscribe;
  }, []);

  return { user, loading };
};


// File: src\hooks\useDownloadQRCode.js
//useDownloadQRCode.js
import { useRef } from 'react';

const useDownloadQRCode = () => {
  const qrRef = useRef();

  const downloadQRCode = (qrCode) => {
    const canvas = qrRef.current.querySelector('canvas');
    const pngUrl = canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');
    let downloadLink = document.createElement('a');
    downloadLink.href = pngUrl;
    downloadLink.download = `${qrCode.title || qrCode.value}.png`;
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
  };

  return { qrRef, downloadQRCode };
};

export default useDownloadQRCode;


// File: src\hooks\useQRCode.js
// src/hooks/useQRCode.js
import { useState, useEffect } from 'react';
import { collection, addDoc, query, where, onSnapshot, deleteDoc, doc, updateDoc, orderBy } from 'firebase/firestore';
import { db } from '../services/firebase';
import { sanitizeInput } from '../utils/sanitizeInput';
// src/hooks/useQRCode.js
export const useQRCode = (user) => {
  const [qrCodes, setQrCodes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const [editingUrl, setEditingUrl] = useState('');
  const [editingTitle, setEditingTitle] = useState('');
  const [editingTags, setEditingTags] = useState('');

  useEffect(() => {
    if (!user) return;

    setLoading(true);

    const q = query(
      collection(db, 'qrCodes'),
      where('uid', '==', user.uid),
      orderBy('createdAt', 'desc')
    );
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const qrCodesData = [];
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        qrCodesData.push({ ...data, id: doc.id, tags: data.tags || [] });
      });
      setQrCodes(qrCodesData);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [user]);

  const handleSubmit = async (url, title, tags = '', type) => {
    const sanitizedUrl = sanitizeInput(url);
    if (sanitizedUrl.trim() && user) {
      try {
        await addDoc(collection(db, 'qrCodes'), {
          uid: user.uid,
          value: sanitizedUrl,
          title: title || 'Untitled',
          tags: tags.split(',').map(tag => tag.trim()).filter(tag => tag),
          type,
          createdAt: new Date(),
        });
      } catch (error) {
        console.error("Error adding document: ", error);
        alert(error.message);
      }
    }
  };

  const handleRemove = async (id) => {
    try {
      await deleteDoc(doc(db, 'qrCodes', id));
    } catch (error) {
      console.error("Error removing document: ", error);
      alert(error.message);
    }
  };

  const handleEdit = (id, value, title, tags) => {
    if (editingId === id) {
      setEditingId(null);
      setEditingUrl('');
      setEditingTitle('');
      setEditingTags('');
    } else {
      setEditingId(id);
      setEditingUrl(value);
      setEditingTitle(title);
      setEditingTags(Array.isArray(tags) ? tags.join(', ') : '');
    }
  };

  const handleEditSubmit = async (e) => {
    e.preventDefault();
    const sanitizedUrl = sanitizeInput(editingUrl);
    if (sanitizedUrl.trim()) {
      try {
        const docRef = doc(db, 'qrCodes', editingId);
        await updateDoc(docRef, {
          value: sanitizedUrl,
          title: editingTitle || 'Untitled',
          tags: editingTags.split(',').map(tag => tag.trim()).filter(tag => tag),
          updatedAt: new Date(),
        });
        setEditingId(null);
        setEditingUrl('');
        setEditingTitle('');
        setEditingTags('');
      } catch (error) {
        console.error("Error updating document: ", error);
        alert(error.message);
      }
    }
  };

  return {
    qrCodes,
    loading,
    editingId,
    editingUrl,
    editingTitle,
    editingTags,
    setEditingUrl,
    setEditingTitle,
    setEditingTags,
    handleSubmit,
    handleRemove,
    handleEdit,
    handleEditSubmit
  };
};


// File: src\main.jsx
//main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './style.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)


// File: src\pages\LoggedInHome.jsx
// src/pages/LoggedInHome.jsx
import React, { useState } from 'react';
import QRCodeForm from '../components/QRCode/QRCodeForm';
import QRCodeList from '../components/QRCode/QRCodeList';
import SearchBar from '../components/SearchBar';
import FilterIcons from '../components/Filter/FilterIcons';
import { useAuth } from '../hooks/useAuth';
import { useQRCode } from '../hooks/useQRCode';

const LoggedInHome = () => {
  const { user } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [qrType, setQrType] = useState('');
  const [filter, setFilter] = useState('newest');
  const {
    qrCodes,
    loading,
    editingId,
    editingUrl,
    editingTitle,
    editingTags,
    setEditingUrl,
    setEditingTitle,
    setEditingTags,
    handleSubmit,
    handleRemove,
    handleEdit,
    handleEditSubmit
  } = useQRCode(user);

  const filteredQRCodes = qrCodes
    .filter(qrCode => {
      const searchLower = searchQuery.toLowerCase();
      const matchesSearchQuery = (
        qrCode.value.toLowerCase().includes(searchLower) ||
        qrCode.title.toLowerCase().includes(searchLower) ||
        (qrCode.tags || []).some(tag => tag.toLowerCase().includes(searchLower))
      );
      const matchesQrType = qrType === '' || qrCode.type === qrType;
      return matchesSearchQuery && matchesQrType;
    })
    .sort((a, b) => {
      if (filter === 'newest') {
        return new Date(b.createdAt) - new Date(a.createdAt);
      } else if (filter === 'oldest') {
        return new Date(a.createdAt) - new Date(b.createdAt);
      } else if (filter === 'az') {
        return a.title.localeCompare(b.title);
      } else if (filter === 'za') {
        return b.title.localeCompare(a.title);
      } else if (filter === 'mostTagged') {
        return (b.tags?.length || 0) - (a.tags?.length || 0);
      } else if (filter === 'leastTagged') {
        return (a.tags?.length || 0) - (b.tags?.length || 0);
      } else if (filter === 'recentlyUpdated') {
        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);
      }
      return 0;
    });

  return (
    <div className="qr-user">
      <div className="qr-generator">
        <QRCodeForm handleSubmit={handleSubmit} isLoggedIn={!!user} />
      </div>

      <div className="qr-userhero">
        <h2>#1 Copy url</h2>
        <h2>#2 Get QR Code</h2>
        <h2>#3 Store them for later</h2>
        <h4>* You can use titles and tags, to better find your qr-codes in the future.</h4>
      </div>

      <div className="qr-search">
        <SearchBar
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          qrType={qrType}
          setQrType={setQrType}
        />
        <FilterIcons filter={filter} setFilter={setFilter} />
      </div>
      
      <div className="qr-codes">
        {user && (
          <div>
            {loading ? (
              <p>Loading QR codes...</p>
            ) : (
              <QRCodeList
                qrCodes={filteredQRCodes}
                editingId={editingId}
                editingUrl={editingUrl}
                editingTitle={editingTitle}
                editingTags={editingTags}
                setEditingUrl={setEditingUrl}
                setEditingTitle={setEditingTitle}
                setEditingTags={setEditingTags}
                handleRemove={handleRemove}
                handleEdit={handleEdit}
                handleEditSubmit={handleEditSubmit}
              />
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default LoggedInHome;


// File: src\pages\LoggedInPassword.jsx
// src/pages/LoggedInHome.jsx
import React, { useState } from 'react';
import QRCodeList from '../components/QRCode/QRCodeList';
import SearchBar from '../components/SearchBar';
import FilterIcons from '../components/Filter/FilterIcons';
import QRCodePasswordForm from '../components/QRCode/QRCodePasswordForm';
import { useAuth } from '../hooks/useAuth';
import { useQRCode } from '../hooks/useQRCode';

const LoggedInHome = () => {
  const { user } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [qrType, setQrType] = useState('');
  const [filter, setFilter] = useState('newest');
  const {
    qrCodes,
    loading,
    editingId,
    editingUrl,
    editingTitle,
    editingTags,
    setEditingUrl,
    setEditingTitle,
    setEditingTags,
    handleSubmit,
    handleRemove,
    handleEdit,
    handleEditSubmit
  } = useQRCode(user);

  const filteredQRCodes = qrCodes
    .filter(qrCode => {
      const searchLower = searchQuery.toLowerCase();
      const matchesSearchQuery = (
        qrCode.value.toLowerCase().includes(searchLower) ||
        qrCode.title.toLowerCase().includes(searchLower) ||
        (qrCode.tags || []).some(tag => tag.toLowerCase().includes(searchLower))
      );
      const matchesQrType = qrType === '' || qrCode.type === qrType;
      return matchesSearchQuery && matchesQrType;
    })
    .sort((a, b) => {
      if (filter === 'newest') {
        return new Date(b.createdAt) - new Date(a.createdAt);
      } else if (filter === 'oldest') {
        return new Date(a.createdAt) - new Date(b.createdAt);
      } else if (filter === 'az') {
        return a.title.localeCompare(b.title);
      } else if (filter === 'za') {
        return b.title.localeCompare(a.title);
      } else if (filter === 'mostTagged') {
        return (b.tags?.length || 0) - (a.tags?.length || 0);
      } else if (filter === 'leastTagged') {
        return (a.tags?.length || 0) - (b.tags?.length || 0);
      } else if (filter === 'recentlyUpdated') {
        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);
      }
      return 0;
    });

  return (
    <div className="qr-user">

      <div className="qr-generator">
        <QRCodePasswordForm handleSubmit={handleSubmit} isLoggedIn={!!user} />
      </div>

      <div className="qr-userhero">
        <h2>#1 Press Generate Password</h2>
        <h2>#2 Get QR Code</h2>
        <h2>#3 Store them for later</h2>
        <h4>* You can use titles and tags, to better find your qr-codes in the future.</h4>
      </div>

      <div className="qr-search">
        <SearchBar
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          qrType={qrType}
          setQrType={setQrType}
        />
        <FilterIcons filter={filter} setFilter={setFilter} />
      </div>
      
      <div className="qr-codes">
        {user && (
          <div>
            {loading ? (
              <p>Loading QR codes...</p>
            ) : (
              <QRCodeList
                qrCodes={filteredQRCodes}
                editingId={editingId}
                editingUrl={editingUrl}
                editingTitle={editingTitle}
                editingTags={editingTags}
                setEditingUrl={setEditingUrl}
                setEditingTitle={setEditingTitle}
                setEditingTags={setEditingTags}
                handleRemove={handleRemove}
                handleEdit={handleEdit}
                handleEditSubmit={handleEditSubmit}
              />
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default LoggedInHome;


// File: src\pages\LoggedInWiFi.jsx
// src/pages/LoggedInHome.jsx
import React, { useState } from 'react';
import QRCodeList from '../components/QRCode/QRCodeList';
import SearchBar from '../components/SearchBar';
import FilterIcons from '../components/Filter/FilterIcons';
import QRCodeWiFiForm from '../components/QRCode/QRCodeWiFiForm';
import { useAuth } from '../hooks/useAuth';
import { useQRCode } from '../hooks/useQRCode';

const LoggedInHome = () => {
  const { user } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [qrType, setQrType] = useState('');
  const [filter, setFilter] = useState('newest');
  const {
    qrCodes,
    loading,
    editingId,
    editingUrl,
    editingTitle,
    editingTags,
    setEditingUrl,
    setEditingTitle,
    setEditingTags,
    handleSubmit,
    handleRemove,
    handleEdit,
    handleEditSubmit
  } = useQRCode(user);

  const filteredQRCodes = qrCodes
    .filter(qrCode => {
      const searchLower = searchQuery.toLowerCase();
      const matchesSearchQuery = (
        qrCode.value.toLowerCase().includes(searchLower) ||
        qrCode.title.toLowerCase().includes(searchLower) ||
        (qrCode.tags || []).some(tag => tag.toLowerCase().includes(searchLower))
      );
      const matchesQrType = qrType === '' || qrCode.type === qrType;
      return matchesSearchQuery && matchesQrType;
    })
    .sort((a, b) => {
      if (filter === 'newest') {
        return new Date(b.createdAt) - new Date(a.createdAt);
      } else if (filter === 'oldest') {
        return new Date(a.createdAt) - new Date(b.createdAt);
      } else if (filter === 'az') {
        return a.title.localeCompare(b.title);
      } else if (filter === 'za') {
        return b.title.localeCompare(a.title);
      } else if (filter === 'mostTagged') {
        return (b.tags?.length || 0) - (a.tags?.length || 0);
      } else if (filter === 'leastTagged') {
        return (a.tags?.length || 0) - (b.tags?.length || 0);
      } else if (filter === 'recentlyUpdated') {
        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);
      }
      return 0;
    });

  return (
    <div className="qr-user">

      <div className="qr-generator">
        <QRCodeWiFiForm handleSubmit={handleSubmit} isLoggedIn={!!user} />
      </div>

      <div className="qr-userhero">
        <h2>#1 Insert SSID and Pass</h2>
        <h2>#2 Get QR Code</h2>
        <h2>#3 Store them for later</h2>
        <h4>* You can use titles and tags, to better find your qr-codes in the future.</h4>
      </div>

       <div className="qr-search">
        <SearchBar
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          qrType={qrType}
          setQrType={setQrType}
        />
        <FilterIcons filter={filter} setFilter={setFilter} />
      </div>
      
      <div className="qr-codes">
        {user && (
          <div>
            {loading ? (
              <p>Loading QR codes...</p>
            ) : (
              <QRCodeList
                qrCodes={filteredQRCodes}
                editingId={editingId}
                editingUrl={editingUrl}
                editingTitle={editingTitle}
                editingTags={editingTags}
                setEditingUrl={setEditingUrl}
                setEditingTitle={setEditingTitle}
                setEditingTags={setEditingTags}
                handleRemove={handleRemove}
                handleEdit={handleEdit}
                handleEditSubmit={handleEditSubmit}
              />
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default LoggedInHome;


// File: src\pages\Login.jsx
// File: src/pages/Login.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../services/firebase';
import { useToast } from '../contexts/ToastProvider';
import LoginForm from '../components/Login/LoginForm';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const navigate = useNavigate();
  const addToast = useToast();

  useEffect(() => {
    const savedEmail = localStorage.getItem('rememberedEmail');
    if (savedEmail) {
      setEmail(savedEmail);
      setRememberMe(true);
    }
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password);
      if (rememberMe) {
        localStorage.setItem('rememberedEmail', email);
      } else {
        localStorage.removeItem('rememberedEmail');
      }
      addToast('Logged in!', 'success');
      navigate('/');
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  return (
    <div className="login">
        <LoginForm
          email={email}
          setEmail={setEmail}
          password={password}
          setPassword={setPassword}
          handleSubmit={handleSubmit}
          rememberMe={rememberMe}
          setRememberMe={setRememberMe}
        />
    </div>
  );
};

export default Login;


// File: src\pages\Password.jsx
// File: src/pages/Password.jsx

import React, { useState, useEffect } from 'react';
import QRCodePasswordForm from '../components/QRCode/QRCodePasswordForm';
import QRCodeNonUserDisplay from '../components/QRCode/QRCodeNonUserDisplay';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const PasswordPage = () => {
  const [submittedPassword, setSubmittedPassword] = useState('');
  const [showMessage, setShowMessage] = useState(false);
  const [animateOut, setAnimateOut] = useState(false);

  useEffect(() => {
    if (!localStorage.getItem('hideMessage')) {
      setTimeout(() => {
        setShowMessage(true);
      }, 3000);
    }
  }, []);

  const handleCloseMessage = () => {
    setAnimateOut(true);
    setTimeout(() => {
      setShowMessage(false);
      setAnimateOut(false);
      localStorage.setItem('hideMessage', 'true');
    }, 500);
  };

  const handleFormSubmit = (password) => {
    console.log('Form submitted with Password:', password);
    setSubmittedPassword(password);
  };

  return (
    <div className="qr-nonuser">
      <div className="qr-generator">
        <QRCodePasswordForm handleSubmit={handleFormSubmit} />
      </div>
      <div className="qr-codes">
        {submittedPassword ? (
          <QRCodeNonUserDisplay submittedUrl={submittedPassword} />
        ) : (
          <div className="qr-placeholder"><FontAwesomeIcon icon="qrcode" /></div>
        )}
      </div>
      {showMessage && (
        <div className={`message-to-user ${animateOut ? 'slide-out' : 'slide-in'}`}>
          <button className="close-button" onClick={handleCloseMessage}>
            <FontAwesomeIcon icon="xmark" />
          </button>
          <p>Want to save your QR Code? <a href="/register">Register</a> as a user, to save and download all your QR Codes!</p>
        </div>
      )}
    </div>
  );
};

export default PasswordPage;


// File: src\pages\Register.jsx
//Register.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../services/firebase';
import { useToast } from '../contexts/ToastProvider';
import RegisterForm from '../components/Register/RegisterForm';

const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();
  const addToast = useToast();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createUserWithEmailAndPassword(auth, email, password);
      addToast('Registration successful!', 'success');
      navigate('/');
    } catch (error) {
      addToast(error.message, 'error');
    }
  };

  return (
    <div className="register">
      <RegisterForm
        email={email}
        setEmail={setEmail}
        password={password}
        setPassword={setPassword}
        handleSubmit={handleSubmit}
      />
    </div>
  );
};

export default Register;



// File: src\pages\Settings.jsx
// src/pages/Settings.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { auth } from '../services/firebase';
import { useToast } from '../contexts/ToastProvider';
import { useAuth } from '../hooks/useAuth';
import EmailStatus from '../components/Settings/EmailStatus';
import PasswordChange from '../components/Settings/PasswordChange';
import AccountDeletion from '../components/Settings/AccountDeletion';

const Settings = () => {
  const { user, loading } = useAuth();
  const navigate = useNavigate();
  const addToast = useToast();
  
  const [newEmail, setNewEmail] = useState('');
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmNewPassword, setConfirmNewPassword] = useState('');

  useEffect(() => {
    if (user) {
      setNewEmail(user.email);
    }
  }, [user]);

  const handleCancelEdit = () => {
    setNewEmail(user.email);
    setCurrentPassword('');
    setNewPassword('');
    setConfirmNewPassword('');
  };

  return (
    <div className="settings">
      <h2>Settings</h2>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <>
          <EmailStatus
            user={user}
            emailVerified={user?.emailVerified}
            newEmail={newEmail}
            setNewEmail={setNewEmail}
            currentPassword={currentPassword}
            setCurrentPassword={setCurrentPassword}
            handleCancelEdit={handleCancelEdit}
          />
          <PasswordChange
            currentPassword={currentPassword}
            setCurrentPassword={setCurrentPassword}
            newPassword={newPassword}
            setNewPassword={setNewPassword}
            confirmNewPassword={confirmNewPassword}
            setConfirmNewPassword={setConfirmNewPassword}
            handleCancelEdit={handleCancelEdit}
          />
        </>
      )}
      <AccountDeletion user={user} navigate={navigate} addToast={addToast} />
    </div>
  );
};

export default Settings;


// File: src\pages\URL.jsx
// File: src/pages/URL.jsx
import React, { useState, useEffect } from 'react';
import QRCodeForm from '../components/QRCode/QRCodeForm';
import QRCodeNonUserDisplay from '../components/QRCode/QRCodeNonUserDisplay';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const URLPage = () => {
  const [submittedUrl, setSubmittedUrl] = useState('');
  const [showMessage, setShowMessage] = useState(false);
  const [animateOut, setAnimateOut] = useState(false);

  useEffect(() => {
    if (!localStorage.getItem('hideMessage')) {
      setTimeout(() => {
        setShowMessage(true);
      }, 3000);
    }
  }, []);

  const handleCloseMessage = () => {
    setAnimateOut(true);
    setTimeout(() => {
      setShowMessage(false);
      setAnimateOut(false);
      localStorage.setItem('hideMessage', 'true');
    }, 500);
  };

  const handleFormSubmit = (url) => {
    console.log('Form submitted with URL:', url);
    setSubmittedUrl(url);
  };

  return (
    <div className="qr-nonuser">
      <div className="qr-generator">
        <QRCodeForm handleSubmit={handleFormSubmit} isLoggedIn={false} />
      </div>
      <div className="qr-codes">
        {submittedUrl ? (
          <QRCodeNonUserDisplay submittedUrl={submittedUrl} />
        ) : (
          <div className="qr-placeholder"><FontAwesomeIcon icon="qrcode" /></div>
        )}
      </div>
      {showMessage && (
        <div className={`message-to-user ${animateOut ? 'slide-out' : 'slide-in'}`}>
          <button className="close-button" onClick={handleCloseMessage}>
            <FontAwesomeIcon icon="xmark" />
          </button>
          <p>Want to save your QR Code? <a href="/register">Register</a> as a user, to save and download all your QR Codes!</p>
        </div>
      )}
    </div>
  );
};

export default URLPage;


// File: src\pages\WiFi.jsx
// File: src/pages/WiFi.jsx
import React, { useState, useEffect } from 'react';
import QRCodeWiFiForm from '../components/QRCode/QRCodeWiFiForm';
import QRCodeNonUserDisplay from '../components/QRCode/QRCodeNonUserDisplay';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const WiFiPage = () => {
  const [submittedWifi, setSubmittedWifi] = useState('');
  const [showMessage, setShowMessage] = useState(false);
  const [animateOut, setAnimateOut] = useState(false);

  useEffect(() => {
    if (!localStorage.getItem('hideMessage')) {
      setTimeout(() => {
        setShowMessage(true);
      }, 3000);
    }
  }, []);

  const handleCloseMessage = () => {
    setAnimateOut(true);
    setTimeout(() => {
      setShowMessage(false);
      setAnimateOut(false);
      localStorage.setItem('hideMessage', 'true');
    }, 500);
  };

  const handleFormSubmit = (wifiString) => {
    console.log('Form submitted with WiFi String:', wifiString);
    setSubmittedWifi(wifiString);
  };

  return (
    <div className="qr-nonuser">
      <div className="qr-generator">
        <QRCodeWiFiForm handleSubmit={handleFormSubmit} />
      </div>
      <div className="qr-codes">
        {submittedWifi ? (
          <QRCodeNonUserDisplay submittedUrl={submittedWifi} />
        ) : (
          <div className="qr-placeholder"><FontAwesomeIcon icon="qrcode" /></div>
        )}
      </div>
      {showMessage && (
        <div className={`message-to-user ${animateOut ? 'slide-out' : 'slide-in'}`}>
          <button className="close-button" onClick={handleCloseMessage}>
            <FontAwesomeIcon icon="xmark" />
          </button>
          <p>Want to save your QR Code? <a href="/register">Register</a> as a user, to save and download all your QR Codes!</p>
        </div>
      )}
    </div>
  );
};

export default WiFiPage;


// File: src\services\firebase.js
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

export { auth, db };






// File: src\style.css
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

html, body {
  height: 100%;
  color: white;
  font-size: 10px;
  background-color: #000814;
  font-family: Arial, sans-serif;
}

article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote::before, blockquote::after, q::before, q::after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

a, button {
  font-size: 1.6rem;
  cursor: pointer;
}
a.green, button.green {
  color: #000814 !important;
  background-color: #0aff4b !important;
}
a.black, button.black {
  color: white !important;
  background-color: #000814 !important;
}
a.white, button.white {
  color: #000814 !important;
  background-color: white !important;
}
a.yellow, button.yellow {
  color: #000814 !important;
  background-color: #FFD60A !important;
}

h1 {
  font-size: 4rem;
}

h2 {
  font-size: 3rem;
}

h3 {
  font-size: 2rem;
}

p {
  font-size: 1.6rem;
}

input {
  font-size: 1.6rem;
}

.container {
  width: 100%;
  margin: 0 auto;
  padding: 1rem;
}
@media (min-width: 576px) {
  .container {
    max-width: 540px;
  }
}
@media (min-width: 768px) {
  .container {
    max-width: 720px;
  }
}
@media (min-width: 992px) {
  .container {
    max-width: 960px;
  }
}
@media (min-width: 1200px) {
  .container {
    max-width: 1140px;
  }
}

@keyframes slideIn {
  from {
    transform: translateX(-50%) translateY(100%);
    opacity: 0;
  }
  to {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
  }
}
@keyframes slideOut {
  from {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
  }
  to {
    transform: translateX(-50%) translateY(100%);
    opacity: 0;
  }
}
input {
  display: block;
  width: 100%;
  padding: 2rem;
  margin: 1.5rem 0;
  border-radius: 1rem;
}
@media (min-width: 992px) {
  input {
    width: 40rem;
  }
}

button {
  font-weight: 900;
  margin: 2rem 0;
  padding: 2rem;
  width: 100%;
  color: #000814;
  background-color: #FFD60A;
  border-radius: 1rem;
}
@media (min-width: 992px) {
  button {
    width: auto;
  }
}

.custom-checkbox {
  display: inline-block;
  position: relative;
  padding-left: 3.5rem;
  cursor: pointer;
  font-size: 1.6rem;
  user-select: none;
}

.custom-checkbox input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

.custom-checkbox .checkmark {
  position: absolute;
  top: 0;
  left: 0;
  height: 2.5rem;
  width: 2.5rem;
  background-color: #ccc;
  border-radius: 0.4rem;
}

.custom-checkbox:hover input ~ .checkmark {
  background-color: #b3b3b3;
}

.custom-checkbox input:checked ~ .checkmark {
  background-color: #0aff4b;
}

.custom-checkbox .checkmark:after {
  content: "";
  position: absolute;
  display: none;
}

.custom-checkbox input:checked ~ .checkmark:after {
  display: block;
}

.custom-checkbox .checkmark:after {
  left: 1rem;
  top: 0.6rem;
  width: 0.5rem;
  height: 1rem;
  border: solid #000814;
  border-width: 0 3px 3px 0;
  transform: rotate(45deg);
}

.top nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 4rem;
}
.top nav i a {
  position: relative;
  color: white;
  margin: 0;
  font-size: 3rem;
  font-weight: 900;
  top: -5px;
}
.top nav .nav-links {
  font-weight: 900;
  display: flex;
  justify-content: space-between;
}
.top nav .nav-links i {
  display: none;
}
@media (min-width: 768px) {
  .top nav .nav-links i {
    display: inline-block;
  }
}
.top nav .nav-links svg {
  margin: 0 0.4rem 0 0.5rem;
}
.top nav a, .top nav button {
  color: white;
  margin: 0 0 0 4rem;
  padding: 0;
  text-decoration: none;
  background: none;
  border: none;
}

header {
  display: flex;
  justify-content: center;
}
header nav {
  display: inline-block;
  padding: 0rem;
  border-radius: 2rem;
  backdrop-filter: blur(1rem);
  background: rgba(0, 8, 20, 0.3);
}
header nav .nav-links {
  font-weight: 900;
  display: flex;
  justify-content: space-between;
}
header nav .nav-links i {
  display: none;
}
@media (min-width: 768px) {
  header nav .nav-links i {
    display: inline-block;
  }
}
header nav .nav-links svg {
  margin: 0 0.4rem 0 0.5rem;
}
header nav a, header nav button {
  color: white;
  margin: 0;
  padding: 3rem 2rem;
  text-decoration: none;
  background: none;
  border: none;
  border-radius: 2rem;
}
@media (min-width: 576px) {
  header nav a, header nav button {
    padding: 4rem 4rem;
  }
}
@media (min-width: 768px) {
  header nav a, header nav button {
    padding: 4rem 6rem;
  }
}
header nav a.active, header nav button.active {
  background-color: rgba(0, 8, 20, 0.5);
}

.hero {
  display: flex;
  flex-direction: column;
  align-items: left;
  justify-content: center;
  height: 100%;
}
.hero h1 {
  margin: 1rem 0;
}
.hero h2 {
  margin: 1rem 0;
}

/* src/style.css */
footer {
  color: white;
  text-align: center;
}
footer nav {
  margin: 2rem 0;
}
footer nav a {
  margin: 1rem;
  color: white;
}
footer p {
  margin: 4rem 0;
}

body {
  height: auto;
  background: linear-gradient(to top, rgba(0, 8, 20, 0.9), rgba(0, 8, 20, 0.8), rgba(0, 8, 20, 0.6)), url(../../assets/bg1.webp) no-repeat top center;
  background-size: cover;
  padding: 2rem;
}
@media (min-width: 576px) {
  body {
    padding: 2rem 8rem;
  }
}

.App {
  margin: 0 auto;
  display: grid;
  row-gap: 4rem;
  grid-template-columns: 1fr;
  grid-template-rows: auto;
  grid-template-areas: "top" "header" "hero" "qr" "footer";
  min-height: 100vh;
  max-width: 1600px;
}

.top {
  grid-area: top;
  padding: 0;
}

header {
  grid-area: header;
  padding: 2rem 0;
}

.hero {
  grid-area: hero;
  padding: 2rem 0;
}

.qr {
  grid-area: qr;
  padding: 2rem 0;
}

footer {
  grid-area: footer;
  padding: 20rem 0;
}

/* Toast.css */
.toast-container {
  position: fixed;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.toast {
  background-color: white;
  color: #000814;
  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
  padding: 1rem 2rem;
  margin-bottom: 1rem;
  border-radius: 1rem;
  opacity: 0.8;
  font-size: 2rem;
  min-width: 200px;
  text-align: center;
}

.toast.success {
  background-color: #0aff4b;
}

.toast.error {
  background-color: #ff0a0a;
}

.login, .register {
  display: flex;
  justify-content: center;
  align-items: center;
}
.login .form-container, .register .form-container {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto;
  border-radius: 2rem;
  max-width: 400px;
  width: 100%;
}
.login .form-container h2, .register .form-container h2 {
  text-align: center;
  font-size: 2rem;
  margin-bottom: 4rem;
}
.login .form-container input, .register .form-container input {
  width: 100%;
}
.login .form-container .checkbox-container, .register .form-container .checkbox-container {
  display: flex;
  align-items: center;
}
.login .form-container .checkbox-container .custom-checkbox, .register .form-container .checkbox-container .custom-checkbox {
  margin-right: 0.5rem;
}
.login .form-container .checkbox-container label, .register .form-container .checkbox-container label {
  position: relative;
  font-size: 1.6rem;
}
.login .form-container .checkbox-container label[for=rememberMe], .register .form-container .checkbox-container label[for=rememberMe] {
  top: 1.3rem;
}
.login .form-container button, .register .form-container button {
  margin: 4rem 0;
}

.settings {
  padding: 10rem 0;
}
.settings h2 {
  display: block;
  padding: 5rem 0;
  margin: 2rem auto;
  width: 100%;
}
@media (min-width: 768px) {
  .settings h2 {
    max-width: 40rem;
  }
}
.settings p {
  display: block;
  padding: 5rem 0;
  margin: 2rem auto;
  width: 100%;
}
@media (min-width: 768px) {
  .settings p {
    max-width: 40rem;
  }
}
.settings input {
  font-size: 2rem;
  display: block;
  width: 100%;
  padding: 2rem;
  margin: 2rem auto;
  color: #001D3D;
  border-radius: 1rem;
}
@media (min-width: 768px) {
  .settings input {
    max-width: 40rem;
  }
}
.settings .confirm-delete p {
  font-size: 2rem;
  color: #ff0a0a;
}
.settings .email-verification p {
  font-size: 1.5rem;
  color: #ff0a0a;
}
.settings .email-verification .verify-email-button {
  background-color: #001D3D;
  color: white;
  padding: 1rem 2rem;
  margin: 1rem auto;
  display: block;
  border-radius: 1rem;
}
@media (min-width: 768px) {
  .settings .email-verification .verify-email-button {
    max-width: 40rem;
  }
}
.settings button {
  display: block;
  width: 100%;
  padding: 2rem;
  margin: 4rem auto;
  font-weight: 900;
  background-color: #FFD60A;
  border-radius: 1rem;
}
@media (min-width: 768px) {
  .settings button {
    max-width: 40rem;
  }
}
.settings button.confirm-button, .settings button.cancel-button {
  margin: 3rem auto;
}
@media (min-width: 768px) {
  .settings button.confirm-button, .settings button.cancel-button {
    max-width: 40rem;
  }
}
.settings button.confirm-button {
  color: #000814;
  background-color: #0aff4b;
}
.settings button.cancel-button {
  margin: 2rem auto;
  color: white;
  background-color: #001D3D;
}
.settings button.change-email-button {
  margin: 0.5rem auto;
  color: #000814;
  background-color: #0aff4b;
}
.settings button.delete-account-button {
  color: white;
  background-color: #ff0a0a;
}
.settings .change-email-form {
  margin-bottom: 4rem;
}
.settings .password-change h3 {
  display: block;
  padding: 5rem 0;
  margin: 2rem auto;
  width: 100%;
}
@media (min-width: 768px) {
  .settings .password-change h3 {
    max-width: 40rem;
  }
}
.settings .delete-account h3 {
  display: block;
  padding: 5rem 0;
  margin: 2rem auto;
  width: 100%;
}
@media (min-width: 768px) {
  .settings .delete-account h3 {
    max-width: 40rem;
  }
}

.qr-nonuser {
  display: grid;
  row-gap: 5rem;
  column-gap: 5rem;
  grid-template-columns: 100%;
  grid-template-rows: auto;
  grid-template-areas: "qr-generator" "qr-codes";
}
@media (min-width: 992px) {
  .qr-nonuser {
    grid-template-columns: 50%;
    grid-template-areas: "qr-generator qr-codes";
  }
}
.qr-nonuser .qr-generator {
  grid-area: qr-generator;
  min-height: 45rem;
  border-radius: 2rem;
  backdrop-filter: blur(1rem);
  background: rgba(0, 8, 20, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}
@media (min-width: 992px) {
  .qr-nonuser .qr-generator {
    min-height: 65rem;
  }
}
.qr-nonuser .qr-generator form {
  width: 80%;
  padding: 2rem 0;
}
.qr-nonuser .qr-generator form h3 {
  font-size: 3rem;
  margin: 0 0 5rem 0;
}
.qr-nonuser .qr-generator form input {
  width: 100%;
}
.qr-nonuser .qr-generator form button {
  width: 100%;
}
.qr-nonuser .qr-codes {
  grid-area: qr-codes;
  min-height: 45rem;
  padding: 0rem;
  border-radius: 2rem;
  backdrop-filter: blur(1rem);
  background: rgba(0, 8, 20, 0.5);
  display: flex;
  justify-content: center;
  flex-direction: column;
}
@media (min-width: 992px) {
  .qr-nonuser .qr-codes {
    min-height: 65rem;
    padding: 4rem;
  }
}
.qr-nonuser .qr-codes canvas {
  width: 80% !important;
  height: auto !important;
  display: block;
  margin: 2rem auto;
  border-radius: 2rem;
}
.qr-nonuser .qr-codes a {
  display: inline-block;
  width: auto;
  margin: 1rem 0;
  padding: 2rem 4rem;
  color: #FFD60A;
  border-radius: 2rem;
  background-color: #001D3D;
  text-decoration: underline;
  word-break: break-all;
}
.qr-nonuser .qr-codes .qr-placeholder {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  width: 100%;
  height: 100%;
}
.qr-nonuser .qr-codes .qr-placeholder svg {
  width: 50%;
  height: 50%;
  color: white;
}
.qr-nonuser .message-to-user {
  position: fixed;
  bottom: 2rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 5rem;
  border-radius: 2rem;
  background-color: #FFD60A;
  line-height: 2.5rem;
  font-size: 2rem;
  font-weight: 900;
  color: #000814;
  min-width: 80%;
  animation: slideIn 0.5s forwards;
}
.qr-nonuser .message-to-user.slide-out {
  animation: slideOut 0.5s forwards;
}
@media (min-width: 992px) {
  .qr-nonuser .message-to-user {
    padding: 2rem 4rem;
    min-width: 60rem;
  }
}
.qr-nonuser .message-to-user p a {
  color: inherit;
  padding: 0;
  margin: 0;
  background: unset;
}
.qr-nonuser .message-to-user .close-button {
  position: absolute;
  top: -3rem;
  right: -0.5rem;
  background: none;
  border: none;
  font-size: 3rem;
  cursor: pointer;
  color: #000814;
}

.qr-user {
  display: grid;
  row-gap: 5rem;
  grid-template-columns: auto;
  grid-template-rows: auto auto;
  grid-template-areas: "qr-userhero" "qr-generator" "qr-search" "qr-codes";
}
@media (min-width: 768px) {
  .qr-user {
    grid-template-columns: 50% 50%;
    grid-template-areas: "qr-generator qr-userhero" "qr-search qr-search" "qr-codes qr-codes";
  }
}
.qr-user .qr-generator {
  grid-area: qr-generator;
  display: flex;
  justify-content: center;
  flex-direction: column;
}
.qr-user .qr-userhero {
  grid-area: qr-userhero;
  display: flex;
  justify-content: center;
  flex-direction: column;
  position: relative;
  width: 100%;
  padding: 0 4rem;
  top: -4rem;
}
.qr-user .qr-userhero h2 {
  margin: 0.5rem 0;
}
.qr-user .qr-userhero h4 {
  margin: 1rem 0;
  font-size: 2rem;
}
.qr-user .qr-search {
  grid-area: qr-search;
  display: grid;
  grid-template-columns: auto;
  grid-template-areas: "search" "select" "filter";
  align-items: center;
  padding: 10rem 0 0 0;
}
@media (min-width: 992px) {
  .qr-user .qr-search {
    grid-template-rows: auto;
    grid-template-areas: "search filter" "select select";
  }
}
@media (min-width: 768px) {
  .qr-user .qr-search {
    grid-template-columns: 1fr auto;
  }
}
.qr-user .qr-search input {
  grid-area: search;
  font-weight: 900;
}
.qr-user .qr-search select {
  grid-area: select;
  width: 20rem;
  font-weight: 900;
  padding: 1rem 2rem;
  border-radius: 1rem;
}
.qr-user .qr-search .filter {
  grid-area: filter;
  justify-self: start;
  margin: 2rem 0;
}
.qr-user .qr-search .filter > svg {
  margin: 1rem;
}
@media (min-width: 768px) {
  .qr-user .qr-search .filter {
    justify-self: end;
    margin: 0;
  }
}
.qr-user .qr-codes {
  grid-area: qr-codes;
  padding: 0 0 10rem 0;
}
.qr-user .qr-codes .qr-codes-grid {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
}
.qr-user .qr-codes .qr-codes-grid .qr-code-wrapper {
  display: block;
  padding: 1rem;
  border-radius: 2rem;
  background-color: white;
}
.qr-user .qr-codes .qr-codes-grid .qr-code {
  display: block;
  padding: 1rem;
  border-radius: 2rem;
  background-color: inherit;
}
.qr-user .qr-codes .qr-codes-grid .qr-code canvas {
  width: 100% !important;
  height: auto !important;
  display: inline;
  float: left;
  margin-bottom: 20px;
  border-radius: 2rem;
}
.qr-user .qr-codes .qr-codes-grid .qr-code h3 {
  display: inline;
  float: left;
  width: 90%;
  margin: 0 1rem;
  padding: 1rem;
  color: #001D3D;
}
.qr-user .qr-codes .qr-codes-grid .qr-code a, .qr-user .qr-codes .qr-codes-grid .qr-code input {
  display: inline;
  float: left;
  width: 90%;
  margin: 0 1rem;
  padding: 1rem;
  color: #001D3D;
  text-decoration: underline;
  word-break: break-all;
}
.qr-user .qr-codes .qr-codes-grid .qr-code input {
  border-radius: 0.6666666667rem;
  border: solid 1px #001D3D;
}
.qr-user .qr-codes .qr-codes-grid .qr-code .tags-container {
  display: inline;
  float: left;
  width: 90%;
  margin: 0 1rem;
  padding: 1rem;
}
.qr-user .qr-codes .qr-codes-grid .qr-code .tags-container .tag-icon {
  display: inline;
  float: left;
  width: 90%;
  margin: 0 1rem;
  padding: 1rem;
  color: #001D3D;
}
.qr-user .qr-codes .qr-codes-grid .qr-code .tags-container .tag {
  display: inline-block;
  padding: 0.8rem;
  margin: 0.5rem;
  border-radius: 1rem;
  font-size: 1.6rem;
  color: white;
  background-color: rgba(0, 8, 20, 0.8);
}
.qr-user .qr-codes .qr-codes-grid .qr-code .tags-container .tag:first-child {
  margin: 0.5rem 0;
}
.qr-user .qr-codes .qr-codes-grid .qr-code .qr-type {
  position: absolute;
  bottom: 1.5rem;
  left: 2rem;
  font-weight: 900;
  font-size: 1.2rem;
  color: rgba(0, 8, 20, 0.4);
}
.qr-user .qr-codes .qr-codes-grid .qr-code button {
  display: inline;
  width: 4rem;
  margin: 2rem 1rem;
  padding: 1rem;
  float: right;
  color: #000814;
}
.qr-user .qr-codes .qr-codes-grid .qr-code button.trash {
  background-color: #ff0a0a;
  color: white;
}
.qr-user .qr-codes .qr-codes-grid .qr-code .edit-qr-code {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  border-radius: 2rem;
  backdrop-filter: blur(1rem);
  background: rgba(255, 255, 255, 0.5);
}
.qr-user .qr-codes .qr-codes-grid .qr-code .edit-qr-code label {
  font-weight: 900;
  font-size: 1.6rem;
  color: #000814;
  margin: 1rem 2rem;
}
.qr-user .qr-codes .qr-codes-grid .qr-code .edit-qr-code .approve-edit {
  display: flex;
  justify-self: flex-end;
  align-self: flex-end;
  margin: 0 1rem;
}
.qr-user .inittxt {
  width: 100%;
}

/*# sourceMappingURL=style.css.map */


// File: src\utils\sanitizeInput.js
//sanitizeInput.js
import DOMPurify from 'dompurify';

export const sanitizeInput = (input) => {
  return DOMPurify.sanitize(input, { ALLOWED_TAGS: [], ALLOWED_ATTR: [] });
};


